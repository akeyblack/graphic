package lab2;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

@SuppressWarnings("serial")
public class lab2 extends JPanel implements ActionListener {
    Timer timer;

    static int maxWidth = 1600;
    static int maxHeight = 900;

    double angle = 0;
    
    Color myRed = new Color(139, 0, 0);

    public lab2() {
        timer = new Timer(10, this);
        timer.start();
    }

    public void paint(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
        RenderingHints.VALUE_ANTIALIAS_ON);
        rh.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHints(rh);
        
        g2d.setBackground(myRed);
        g2d.clearRect(0, 0, maxWidth, maxHeight);


        g2d.setColor(Color.WHITE);
        BasicStroke bs1 = new BasicStroke(16, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND);
        g2d.setStroke(bs1);
        g2d.drawRect(20, 20, 1560, 830);


        //g2d.translate(maxWidth / 2, maxHeight / 2);
       // g2d.rotate(Math.toRadians(angle), 0,0);
        
        g2d.setColor(Color.WHITE);
        g2d.fillOval(220-55-8, maxHeight/2-100-100-100, 176, 200);
        
        GradientPaint gp = new GradientPaint(200, maxHeight/2-100-100, Color.WHITE, 400, maxHeight/2-100, Color.BLACK, true);
        g2d.setPaint(gp);
        g2d.fillOval(220-55, maxHeight/2-92-100-100, 160, 184);
        
        g2d.setColor(myRed);
        g2d.fillOval(268,maxHeight/2-70-100-100,140,140);
        g2d.fillOval(220-140,maxHeight/2-70-100-100,140,140);
        
        
        g2d.setColor(Color.BLACK);
        double points[][] = {
                { 0, 100 },
                { 280, 100 },
                { 280, 110 },
                { 0, 110 }
        };
        GeneralPath rect = new GeneralPath();
        rect.moveTo(points[0][0], points[0][1]);
        for (int k = 1; k < points.length; k++)
            rect.lineTo(points[k][0], points[k][1]);
        rect.closePath();
        g2d.fill(rect);
    }

    public void actionPerformed(ActionEvent e) {
    	angle += 3.6;
    	if (angle == 360)
    		angle = 0;
        repaint();
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("lab2");
        frame.add(new lab2());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1600, 900);
        frame.setResizable(false);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        Dimension size = frame.getSize();
        Insets insets = frame.getInsets();
        maxWidth = size.width - insets.left - insets.right - 1;
        maxHeight = size.height - insets.top - insets.bottom - 1;
    }
}
